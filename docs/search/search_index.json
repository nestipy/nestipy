{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Nestipy is a Python framework inspired by NestJS and built on top of FastAPI or Blacksheep. It adheres to NestJS's modular architecture, offering a structured approach to developing APIs that's intuitive and enjoyable. With Nestipy, developers can create scalable and maintainable APIs effortlessly. The framework embraces key features like dependency injection, type annotations, decorators, and code generation, facilitating the creation of clean and testable codebases. Notably, Nestipy extends its functionality to support GraphQL through integration with Strawberry. This allows developers to harness the power and flexibility of GraphQL within the Nestipy framework.</p>"},{"location":"#installation","title":"Installation","text":"<p>To get started, you can either scaffold the project with the Nestipy CLI.</p> Bash<pre><code>pip install nestipy-cli\nnestipy new project-name\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>In this documentation, we solely highlight the distinctions between Nestipy and  NestJS. However, you can refer to the NestJS documentation   for all concepts.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#credits","title":"Credits","text":"<p>NestJS, a framework for building efficient, scalable Node.js server-side applications.</p> <p>FastAPI, a modern, fast (high-performance), web framework for building APIs with Python.</p> <p>Blacksheep, an asynchronous web framework to build event-based web applications with Python.</p> <p>Strawberry, a developer friendly GraphQL library for Python, designed for modern development.</p>"},{"location":"dynamic/","title":"Dynamic","text":""},{"location":"dynamic/#nice-to-know","title":"Nice to know","text":"<ol> <li>[x] A dynamic module must be decorated with <code>@Module()</code> and must extends <code>DynamicModule</code></li> <li>[x] Inside Dynamic module, we can access ioc container by <code>self.get_container()</code> and this container , inside property <code>instances</code> we can access to any instance of ModuleProvider or Service that we have declared in any Module.</li> <li>[x] <code>on_startup</code>, and <code>on_shutdown</code> hooks are available in any Module(Dynamic or Not)</li> <li>[x] We can define a provider by using <code>ModuleProvider</code> instance instead of create a service in Module.</li> <li>[x] All provider declared in <code>AppModule</code> are declared as Global Provider</li> <li>[x] Module is is compiled by its priority order of declaration in imports</li> </ol>"},{"location":"gateway/","title":"Cli","text":""},{"location":"gateway/#using-socketio-gateway","title":"Using socketIO Gateway","text":"<ol> <li>[x] First create gateway provider  <code>nestipy g provider EventGateway</code> <code>event_gateway.py</code> Python<pre><code>from nestipy.common import Gateway, GATEWAY_SERVER, SubscribeMessage\nfrom socketio import AsyncServer\n\n@Gateway()\nclass EventGateway:\n    server: AsyncServer = Inject(GATEWAY_SERVER)\n\n    SubscribeMessage('message')\n    def on_message(self, sid, data):\n        print(sid, data)\n        self.server.emit('message', data, sid)\n</code></pre></li> <li>[x] Register EventGateway in app_module providers</li> <li>[x] Modify <code>main.py</code> by adding:  Python<pre><code>import socketio \n...\nsio = socketio.AsyncServer(async_mode='asgi')\napp.useSocketIo(sio)\n...\n</code></pre> 4.[x] Everything will be ok </li> <li>[x] When socketIo in register in main, GATEWAY_SERVER provider will be available every where by injecting it.</li> </ol>"},{"location":"plugin/","title":"Security","text":""},{"location":"plugin/#list-of-available-modules","title":"List of available modules","text":""},{"location":"plugin/#strawberry-module","title":"Strawberry module","text":"<p>Usage: register Strawberry module in <code>app_module.py</code> to use it  <code>app_module.py</code></p> Python<pre><code>...\nfrom nestipy.plugins.strawberry_module.strawberry_module import StrawberryModule, StrawberryOption\n\n...\n\n\n@Module(\n    imports=[\n        ...\n        StrawberryModule.for_root(\n            resolvers=[UserModule],\n            option=StrawberryOption(graphql_ide='graphiql')\n        ),\n        ...\n    ],\n)\nclass AppModule:\n    pass\n</code></pre> <p>In resolvers import all modules that you have defined your resolvers.</p>"},{"location":"plugin/#config-module","title":"Config module","text":"<p>Usage: register Config module in <code>app_module.py</code> to use it  <code>app_module.py</code></p> <p>Python<pre><code>...\nfrom nestipy.plugins.config_module.config_module import ConfigModule\n...\n\n\n@Module(\n    imports=[\n        ...\n        ConfigModule.for_root(),\n        ...\n    ],\n\n)\nclass AppModule(NestipyModule):\n   pass\n</code></pre> <code>ConfigModule.for_root()</code> can receive a parameter of .env file</p> <p><code>ConfigModule</code> is a global module, so <code>ConfigService</code> can be injected in any Controller, Resolver, or Service. You can use method <code>get('key')</code> of <code>ConfigService</code> to get value by key from your <code>.env</code> file.</p>"},{"location":"plugin/#peewee-module","title":"Peewee module","text":"<p>Usage: register Peewee module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> <p>Python<pre><code>...\nfrom nestipy.plugins.peewee_module.peewee_module import PeeweeModule,PeeweeDatabaseConfig\nfrom nestipy.plugins.config_module.config_module import ConfigModule, ConfigService\n...\n\n\nasync def peewee_mysql_factory(config: ConfigService) -&gt; PeeweeDatabaseConfig:\n    return PeeweeDatabaseConfig(\n        driver='mysql',\n        database=config.get(\"DB_DATABASE\"),\n        host=config.get(\"DB_HOST\"),\n        port=int(f'{config.get(\"DB_PORT\")}'),\n        user=config.get(\"DB_USER\"),\n        password=config.get(\"DB_PASSWORD\") or ''\n    )\n\n@Module(\n    imports=[\n        ...\n        ConfigModule.for_root(),\n         PeeweeModule.for_root_async(\n            use_factory=peewee_mysql_factory,\n            inject=[ConfigService]\n        ),\n        ...\n    ],\n\n)\nclass AppModule(NestipyModule):\n   pass\n</code></pre> In this example, we show the dependency between module. So , in this case, <code>ConfigModule</code> must be registered in top of <code>PeeweeModule</code>.  <code>ConfigService</code> is a provider exported by <code>ConfigModule</code></p> <p>To register a model in peewee, model must decorate with <code>@Model</code> from <code>peewee_module</code> and must be register by calling <code>PeeweeModule.for_feature([MyModel])</code> in imports of Module. </p>"},{"location":"plugin/#masonite-orm-module","title":"Masonite orm module","text":"<p>Usage: register Masonite orm module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> Python<pre><code>...\nfrom nestipy.plugins.masonite_orm_module.masonite_orm_module import MasoniteOrmModule, MasoniteDatabaseConfig\n...\nasync def masonite_factory(config: ConfigService):\n    await asyncio.sleep(0.4)\n    return {\n        'default': 'mysql',\n        'mysql': MasoniteDatabaseConfig(\n            driver='mysql',\n            host=config.get(\"DB_HOST\"),\n            port=config.get(\"DB_PORT\"),\n            user=config.get(\"DB_USER\"),\n            password=config.get(\"DB_PASSWORD\") or '',\n            database=config.get(\"DB_DATABASE\")\n        )\n    }\n@Module(\n    imports=[\n        ...,\n        ConfigModule.for_root(),\n        MasoniteOrmModule.for_root_async(\n            factory=masonite_factory,\n            inject=[ConfigService]\n        ),\n        ...\n    ]\n)\nclass AppModule:\n    pass\n</code></pre>"},{"location":"plugin/#beanie-mongo-module","title":"Beanie mongo module","text":"<p>Usage: register Beanie mongo module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> <p>Python<pre><code>..\nfrom nestipy.plugins.beanie_module.beanie_module import BeanieModule\n...\n\nasync def beanie_factory(config: ConfigService):\n    return config.get('MONGODB_URL')\n\n\n@Module(\n    imports=[\n        ...,\n        ConfigModule.for_root(),\n        BeanieModule.for_root_async(\n            use_factory=beanie_factory,\n            inject=[ConfigService],\n            documents= [\n                #Register document here or use BeanieModule.for_feature([MyDocument])\n            ]\n        ),\n        ...\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> You must call <code>BeanieModule.for_feature([MyDocument])</code> inside module imports to register a document.</p>"},{"location":"start/","title":"Get started with Nestipy","text":""},{"location":"start/#introduction","title":"Introduction","text":"<p>This documentation introduces a creation of the simplest Nestipy Application.</p>"},{"location":"start/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Nestipy (latest version)</li> </ul>"},{"location":"start/#example","title":"Example","text":""},{"location":"start/#github","title":"Github","text":"<p>Navigate on Nestipy example</p>"},{"location":"start/#setting-up","title":"Setting Up","text":""},{"location":"start/#installation-and-setup","title":"Installation and Setup","text":"<p>All you need to getting started is to install only nestipy, you can achieve this by running the following command using pip</p> Bash<pre><code>pip install nestipy\n</code></pre>"},{"location":"start/#start-with-cli","title":"Start with cli","text":""},{"location":"start/#create-a-new-project","title":"Create a new project","text":"Bash<pre><code>nestipy new my_app\n</code></pre> <p>This command will create a new project with the following structure:</p> Text Only<pre><code>\u251c\u2500\u2500 app_module.py\n\u251c\u2500\u2500 app_controller.py\n\u251c\u2500\u2500 app_service.py\n\u251c\u2500\u2500 main.py\n|\u2500\u2500 requirements.txt\n|\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n</code></pre> <p>After creating the project, to start serve, run the following command inside the project directory:</p> <p>Bash<pre><code>python main.py\n</code></pre> Now you can access the application at http://localhost:8000/schema/swagger for Litestar, http://localhost:8000/docs for Fastapi and test the endpoints.</p> <p>Let's go over the boilerplate code that generated by the cli:</p> app_module.py<pre><code>from nestipy.common.decorator import Module\nfrom .app_controller import AppController\nfrom .app_service import AppService\n\n\n@Module(\n    controllers=[AppController],\n    providers=[AppService]\n)\nclass AppModule:\n    pass\n</code></pre> <p><code>app_controller.py</code></p> Python<pre><code>from nestipy.common.decorator import Controller, Get, Inject, Post, Put, Delete\nfrom .app_service import AppService\n\n\n@Controller()\nclass AppController:\n    service: AppService = Inject(AppService)\n\n    @Get()\n    async def get(self) -&gt; str:\n        return await self.service.get()\n\n    @Post()\n    async def post(self, data: str) -&gt; str:\n        return await self.service.post(data=data)\n\n    @Put('/{user_id}')\n    async def put(self, user_id: int, data: str) -&gt; str:\n        return await self.service.put(id_=user_id, data=data)\n\n    @Delete('/{user_id}')\n    async def delete(self, user_id: int) -&gt; None:\n        await self.service.delete(id_=user_id)\n</code></pre> <p><code>app_service.py</code></p> Python<pre><code>from nestipy.common.decorator import Injectable\n\n\n@Injectable()\nclass AppService:\n\n    @classmethod\n    async def get(cls):\n        return \"test\"\n\n    @classmethod\n    async def post(cls, data: str):\n        return \"test\"\n\n    @classmethod\n    async def put(cls, id_: int, data: str):\n        return \"test\"\n\n    @classmethod\n    async def delete(cls, id_: int):\n        return \"test\"\n</code></pre> <p><code>main.py</code></p> Python<pre><code>import uvicorn\n\nfrom .app_module import AppModule\nfrom nestipy.core.factory import NestipyFactory\n# from nestipy.core.platform import PlatformFastAPI\n\nfrom nestipy.core.platform import PlatformLitestar\n\n# app = NestipyFactory[PlatformFastAPI].create(AppModule, title=\"My FastAPI App\")\napp = NestipyFactory[PlatformLitestar].create(AppModule, title=\"My App\")\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', host=\"0.0.0.0\", port=8000, reload=True)\n</code></pre>"},{"location":"start/#creating-new-resource","title":"Creating new resource","text":"<p>After creating the project, let's create a new resource:</p> Bash<pre><code>pynest g resource user\n-&gt; api\n-&gt; graphql\n</code></pre> <p>By choosing api, we have generated new folder inside src</p> Text Only<pre><code>\u251c\u2500\u2500 user\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 user_controller.py\n\u2502    \u251c\u2500\u2500 user_service.py\n\u2502    \u251c\u2500\u2500 user_dto.py\n\u2502    \u251c\u2500\u2500 user_module.py\n</code></pre> <p>By choosing graphql, we have resolver instead of controller, like the following</p> Text Only<pre><code>\u251c\u2500\u2500 user\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 user_resolver.py\n\u2502    \u251c\u2500\u2500 user_service.py\n\u2502    \u251c\u2500\u2500 user_input.py\n\u2502    \u251c\u2500\u2500 user_module.py\n</code></pre> <p>By using graphql, dont forget to register strawberry module from nestipy plugin inside app_module imports.</p> Python<pre><code>...\nfrom nestipy.plugins.strawberry_module.strawberry_module import StrawberryModule, StrawberryOption\n\n...\n\n\n@Module(\n    imports=[\n        ...\n        StrawberryModule.for_root(\n            resolvers=[UserModule],\n            option=StrawberryOption(graphql_ide='graphiql')\n        ),\n        ...\n    ],\n)\nclass AppModule:\n    pass\n</code></pre>"},{"location":"start/#creating-new-module","title":"Creating new module","text":"<p>With nestipy we can create a module by running the following command</p> Bash<pre><code>nestipy g module example\n</code></pre> <p>This command will create a new directory example inside src and update app_module imports to import this new module.</p> Text Only<pre><code>\u251c\u2500\u2500 example\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 example_module.py\n</code></pre> <p>So inside, we got,</p> <p><code>example_module.py</code></p> Python<pre><code>from nestipy.common.decorator import Module\nfrom nestipy.common.decorator import Module\n\n\n@Module()\nclass ExampleModule:\n    pass\n</code></pre>"},{"location":"start/#creating-new-controller","title":"Creating new controller","text":"<p>Create a controller to handle the requests and responses.</p> Bash<pre><code>nestipy g controller example\n</code></pre> <p><code>examples_controller.py</code></p> Python<pre><code>from nestipy.common.decorator import Controller, Get\n\n\n@Controller('examples')\nclass ExampleController:\n\n    @Get()\n    async def get(self) -&gt; str:\n        return \"test\"\n</code></pre>"},{"location":"start/#creating-new-resolver","title":"Creating new resolver","text":"<p>Or for graphql , create a resolver.</p> Bash<pre><code>nestipy g resolver example\n</code></pre> <p><code>examples_resolver.py</code></p> Python<pre><code>from strawberry.types import Info\nfrom nestipy.plugins.strawberry_module.decorator import Resolver, Query, Mutation\n\n\n@Resolver()\nclass ExampleResolver:\n\n    @Query()\n    def example_test_query(self, root: Info) -&gt; str:\n        return \"test\"\n\n    @Mutation()\n    def example_test_mutation(self, root: Info, test: str) -&gt; str:\n        return test\n</code></pre>"},{"location":"start/#creating-new-service","title":"Creating new service","text":"<p>Implement services to handle business logic.</p> Bash<pre><code>nestipy g service example\n</code></pre> <p><code>examples_service.py</code></p> Python<pre><code>from nestipy.common.decorator import Injectable\n\n\n@Injectable()\nclass ExampleService:\n\n    async def test(self):\n        pass\n</code></pre> <p>Service is injectable inside a controller, resolver or other service by using Inject to inject it as a property of them. </p> Python<pre><code>service: ExampleService = Inject(ExampleService)\n</code></pre>"},{"location":"overview/controller/","title":"Controllers","text":"<p>Controller in Nestipy look like</p> Python<pre><code>from nestipy.common import Controller, Get\n\n\n@Controller('cats')\nclass CatsController:\n    @Get()\n    async def findAll(self) -&gt; str:\n        return 'This action returns all cats'\n</code></pre>"},{"location":"overview/controller/#request-and-response-object","title":"Request and Response object","text":"<p>We can access Request and Response object from handler bu using annotation type Req and Res respectively. Python<pre><code>from nestipy.common import Controller, Get, Response, Request\nfrom nestipy.types_ import Req, Res\n\n@Controller('cats')\nclass CatsController:\n    @Get()\n    async def findAll(self, req: Req[Request], res: Res[Response]) -&gt; str:\n        return await res.send('This action returns all cats')\n</code></pre></p>"},{"location":"overview/controller/#full-resource-sample","title":"Full resource sample","text":"<p>Below is a sample illustrating how different decorators are employed to create a basic controller. This controller furnishes methods for accessing and modifying internal data.</p> Python<pre><code>from dataclasses import dataclass\n\nfrom nestipy.common import Controller, Get, Put, Post, Delete\nfrom nestipy.types_ import Body, Query, Params, Session\n\n\n@dataclass\nclass CreateCat:\n    name: str\n\n\n@Controller('cats')\nclass CatsController:\n\n    @Post()\n    async def create(self, data: Body[CreateCat]) -&gt; str:\n        return 'This action adds a new cat'\n\n    @Get()\n    async def find_all(self, limit: Query[int]) -&gt; str:\n        return f\"This action returns all cats (limit: {limit} items\"\n\n    @Get('/{cat_id}')\n    async def find_one(self, cat_id: Params[str]):\n        return f\"This action returns a #{cat_id} cat\"\n\n    @Put('/{cat_id}')\n    async def update(self, cat_id: Params[str], data: Body[CreateCat]):\n        return f\"This action updates a #{cat_id} cat\"\n\n    @Delete('/{cat_id}')\n    async def remove(self, cat_id: Params[str], user_id: Session[int, None]):\n        return f\"This action removes a #{cat_id} cat\"\n</code></pre>"},{"location":"overview/controller/#getting-up-and-running","title":"Getting up and running","text":"<p>Similar to NestJs, registering controllers within modules is required.</p> Python<pre><code>from nestipy.common import Module\nfrom .cats_controller import CatsController\n\n\n@Module(\n    controllers=[\n        CatsController\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> <p> </p>"},{"location":"overview/first-step/","title":"First steps","text":"<p>These articles will teach you the basic principles of Nestipy. You'll get to know its key components by building a simple CRUD application, which will introduce you to various beginner-level features.</p>"},{"location":"overview/first-step/#prerequisites","title":"Prerequisites","text":"<p>Please make sure that Python (version &gt;= 3.9) is installed on your operating system.</p>"},{"location":"overview/first-step/#setup","title":"Setup","text":"<p>Starting a fresh project using the Nestipy CLI is simple. Just configure Python's environment and run these commands in your OS terminal to create a new Nestipy project. Bash<pre><code>pip install nestipy-cli\nnestipy new project-name\n</code></pre> Upon execution, a directory named <code>project-name</code> will be generated, containing a src/ directory filled with essential core files.</p> Text Only<pre><code>\u251c\u2500\u2500 app_module.py\n\u251c\u2500\u2500 app_controller.py\n\u251c\u2500\u2500 app_service.py\n\u251c\u2500\u2500 main.py\n|\u2500\u2500 requirements.txt\n|\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n</code></pre> <p>The main.py file contains an instance of application and bootstrapping it with uvicorn.</p> Python<pre><code>import uvicorn\nfrom nestipy.core.nestipy_factory import NestipyFactory\n\nfrom app_module import AppModule\n\napp = NestipyFactory.create(AppModule)\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', reload=True)\n</code></pre>"},{"location":"overview/first-step/#platform","title":"Platform","text":"<p>In essence, Nestipy can function with any ASGI framework once an adapter is developed. It inherently supports two ASGI platforms: FastAPI and BlackSheep. You have the freedom to select the one that aligns most closely with your requirements. By default, Nestipy use FastAPI adapter.  We can specify platform from NestipyFactory. Python<pre><code>from nestipy.core.platform import NestipyFastApiApplication\n\napp = NestipyFactory[NestipyFastApiApplication].create(AppModule)\n</code></pre> Or with blacksheep</p> Python<pre><code>from nestipy.core.platform import NestipyBlackSheepApplication\n\napp = NestipyFactory[NestipyBlackSheepApplication].create(AppModule)\n</code></pre>"},{"location":"overview/first-step/#running-the-application","title":"Running the application","text":"<p>After installation, simply run this command in your OS terminal to start the application and listen for incoming HTTP requests:</p> Bash<pre><code>python main.py\n</code></pre> <p></p>"},{"location":"overview/module/","title":"Modules","text":"<p>For Nestipy, module works like NestJs module . Only module re-exporting is not yet supported.</p>"},{"location":"overview/module/#dynamic-modules","title":"Dynamic modules","text":"<p>Following is an example of a dynamic module definition for a <code>DatabaseModule</code>:</p> Python<pre><code>from nestipy.common import Module\nfrom nestipy.common.dynamic_module import DynamicModule\n\n\n@Module()\nclass DatabaseModule:\n    @classmethod\n    def register(cls) -&gt; DynamicModule:\n        return DynamicModule(\n            module=cls,\n            providers=[],\n            controllers=[],\n            imports=[],\n            exports=[]\n        )\n</code></pre> <p>If we want to use params from <code>@Module()</code> decorator in dynamic module, we must do like the following example.</p> Python<pre><code>from nestipy.common import Module, Reflect, ModuleMetadata, ModuleProviderDict\nfrom nestipy.common.dynamic_module import DynamicModule\nfrom nestipy.common.metadata.provider_token import ProviderToken\nfrom nestipy.types_ import Inject\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nDATABASE_OPTION = 'DATABASE_OPTION'\n\n\n@Module(\n    is_global=True\n)\nclass DatabaseModule:\n    option: Inject[ProviderToken(DATABASE_OPTION)]  # this will be an instance of DatabaseOption \n\n    @classmethod\n    def register(cls, option: DatabaseOption) -&gt; DynamicModule:\n        return DynamicModule(\n            module=cls,\n            providers=[ModuleProviderDict(token=DATABASE_OPTION, value=option)] + Reflect.get_metadata(cls,\n                                                                                                       ModuleMetadata.Providers,\n                                                                                                       []),\n            controllers=[] + Reflect.get_metadata(cls, ModuleMetadata.Controllers, []),\n            imports=[] + Reflect.get_metadata(cls, ModuleMetadata.Imports, []),\n            exports=[] + Reflect.get_metadata(cls, ModuleMetadata.Exports, []),\n            is_global=Reflect.get_metadata(cls, ModuleMetadata.Global, False)\n        )\n</code></pre> <p>To facilitate creating of Dynamic module, Nestipy provide <code>ConfigurableModuleBuilder</code> class.</p> <p>This is an example.</p> Python<pre><code>from dataclasses import dataclass\n\nfrom nestipy.common.dynamic_module.builder import ConfigurableModuleBuilder\nfrom nestipy.common.metadata.provider_token import ProviderToken\nfrom nestipy.types_ import Inject\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nConfigurableModuleClass, DATABASE_MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[DatabaseOption]().set_method('for_root').build()\n\n\nclass DatabaseModule(ConfigurableModuleClass):\n    option: Inject[ProviderToken(DATABASE_MODULE_OPTION_TOKEN)]\n</code></pre> <p>For this, we will call <code>DatabaseModule.for_root(option)</code> or <code>DatabaseModule.for_root_async(option_async)</code> to register Module. The default method to call is <code>register</code> and <code>register_async</code> if it's not defined.</p> <p>For a lifecycle hooks, we need to extends <code>NestipyModule</code>.</p> <p>Python<pre><code>from dataclasses import dataclass\n\nfrom nestipy.common.dynamic_module.builder import ConfigurableModuleBuilder\nfrom nestipy.common.metadata.provider_token import ProviderToken\nfrom nestipy.common.module import NestipyModule\nfrom nestipy.types_ import Inject\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nConfigurableModuleClass, DATABASE_MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[DatabaseOption]().set_method(\n    'for_root').build()\n\n\nclass DatabaseModule(ConfigurableModuleClass, NestipyModule):\n    option: Inject[ProviderToken(DATABASE_MODULE_OPTION_TOKEN)]\n\n    async def on_startup(self):\n        pass\n\n    async def on_shutdown(self):\n        pass\n</code></pre> </p>"},{"location":"overview/provider/","title":"Providers","text":"<p>Provider is the same for NestJs providers.</p>"},{"location":"overview/provider/#services","title":"Services","text":"<p>Let's create a example of service.</p> Python<pre><code>from typing import Any\n\nfrom nestipy.common import Injectable\n\n\n@Injectable()\nclass CatsService:\n    _cats: list[Any] = []\n\n    def create(self, cat: Any):\n        self._cats.append(cat)\n\n    def find_all(self):\n        return self._cats\n</code></pre> <p>This is how we use it inside controller.</p> Python<pre><code>from dataclasses import dataclass\n\nfrom nestipy.common import Controller, Post, Get\nfrom nestipy.types_ import Inject, Body\nfrom .cats_service import CatsService\n\n\n@dataclass\nclass CreateCat:\n    name: str\n\n\n@Controller('cats')\nclass CatsController:\n    _service: Inject[CatsService]\n\n    @Post()\n    async def create(self, data: Body[CreateCat]):\n        self._service.create(data)\n\n    @Get()\n    async def find_all(self):\n        return self._service.find_all()\n</code></pre>"},{"location":"overview/provider/#dependency-injection","title":"Dependency injection","text":"<p>With Nestipy, dependency work in 2 ways: </p>"},{"location":"overview/provider/#inject-dependency-via-property-for-class","title":"Inject dependency via property( for class).","text":"Python<pre><code>@Controller('cats')\nclass CatsController:\n    _service: Inject[CatsService]\n</code></pre>"},{"location":"overview/provider/#inject-dependency-via-class-method","title":"Inject dependency via class method.","text":"<p>It work like other dependency method.</p>"}]}