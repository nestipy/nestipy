{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Nestipy is a Python framework inspired by NestJS and built on top of FastAPI or Blacksheep. It adheres to NestJS's modular architecture, offering a structured approach to developing APIs that's intuitive and enjoyable. With Nestipy, developers can create scalable and maintainable APIs effortlessly. The framework embraces key features like dependency injection, type annotations, decorators, and code generation, facilitating the creation of clean and testable codebases. Notably, Nestipy extends its functionality to support GraphQL through integration with Strawberry. This allows developers to harness the power and flexibility of GraphQL within the Nestipy framework.</p>"},{"location":"#installation","title":"Installation","text":"<p>To get started, you can either scaffold the project with the Nestipy CLI.</p> Bash<pre><code>pip install nestipy-cli\nnestipy new project-name\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>In this documentation, we solely highlight the distinctions between Nestipy and  NestJS. However, you can refer to the NestJS documentation   for all concepts.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#credits","title":"Credits","text":"<p>NestJS, a framework for building efficient, scalable Node.js server-side applications.</p> <p>FastAPI, a modern, fast (high-performance), web framework for building APIs with Python.</p> <p>Blacksheep, an asynchronous web framework to build event-based web applications with Python.</p> <p>Strawberry, a developer friendly GraphQL library for Python, designed for modern development.</p>"},{"location":"cli/","title":"Cli","text":"<p>List of available command for Nestipy-CLI :</p> <ul> <li> new {project-name}</li> <li> generate (g, gen)     <ul> <li>resource (r, res) {resource-name}</li> <li>module (mod) {module-name}</li> <li>controller (ctrl) {controller-name}</li> <li>resolver {resolver-name}</li> <li>service {service-name}</li> <li>input {input-name}</li> </ul> </li> </ul>"},{"location":"util/","title":"Utils","text":""},{"location":"util/#config-static-dir-based-view-lifecycle-hook-cors","title":"Config static dir, based view, lifecycle hook, cors","text":"Python<pre><code>import os\n\nfrom nestipy.core import NestipyFactory\nfrom nestipy.common import session\n\napp = NestipyFactory.create(AppModule)\n\n# Enable cors\napp.enable_cors()\n\n# define static folder\napp.use_static_assets(os.path.join(os.path.dirname(__file__), 'public'))\n\n# Config view for template rendering\napp.set_base_view_dir(os.path.join(os.path.dirname(__file__), 'views'))\napp.set_view_engine('minijinja')  # minijinja as template engine.\n\ntemplate_engine = app.get_template_engine()  # get template engine\n\n# use session\napp.use(session())\n\n# LIFECYCLE HOOKS \n\n@app.on_startup\nasync def on_startup_callback():\n    print('Starting ...')\n\n\n@app.on_shutdown\nasync def on_shutdown_callback():\n    print('Shutdown ...')\n</code></pre> <p>Render template</p> Python<pre><code>from typing import Annotated\nfrom nestipy.common import Get, Response, Request, Render\nfrom nestipy.ioc import Req, Res\n\n\nclass AppController:\n\n    @Render('index.html')\n    @Get()\n    async def test(self, req: Annotated[Request, Req()], res: Annotated[Response, Res()]):\n        return {'title': 'Hello'}\n        # return await res.render('index.html', {'title': 'Hello'})\n</code></pre>"},{"location":"fundamental/custom-provider/","title":"Custom providers","text":"<p>We will learn to have same way how NestJs create and use providers.</p>"},{"location":"fundamental/custom-provider/#standard-providers","title":"Standard providers","text":"Python<pre><code>@Module(\n    controllers=[CatsController],\n    providers=[CatsService],\n)\n</code></pre>"},{"location":"fundamental/custom-provider/#value-providers","title":"Value providers","text":"Python<pre><code>from nestipy.common import ModuleProviderDict\n\n\n@Module(\n    controllers=[CatsController],\n    providers=[\n        ModuleProviderDict(\n            token=CatsService,\n            value=CatsService\n        )\n    ],\n)\n</code></pre>"},{"location":"fundamental/custom-provider/#non-class-based-provider-tokens","title":"Non-class-based provider tokens","text":"Python<pre><code>from nestipy.common import Module, ModuleProviderDict\nfrom .connection import connection\n\n\n@Module(\n    controllers=[CatsController],\n    providers=[\n        ModuleProviderDict(\n            token='CONNECTION',\n            value=connection\n        )\n    ],\n)\nclass AppModule:\n    pass\n</code></pre> <p>For, use_class and use_existing, it's the same as NestJs.</p>"},{"location":"fundamental/custom-provider/#factory-provider","title":"Factory provider","text":"Python<pre><code>from nestipy.common import ModuleProviderDict, Module\nfrom .connection import connection\n\n\ndef factory_value() -&gt; str:\n    return connection\n\n\n@Module(\n    controllers=[CatsController],\n    providers=[\n        ModuleProviderDict(\n            token='CONNECTION',\n            factory=factory_value\n        )\n    ],\n)\nclass AppModule:\n    pass\n</code></pre> <p>Factory can be an async function to have async provider.</p>"},{"location":"fundamental/custom-provider/#inject-providers","title":"Inject providers","text":"Python<pre><code>from typing import Annotated\nfrom nestipy.common.decorator import Controller\nfrom nestipy.ioc import Inject\n\n\n@Controller('cats')\nclass CatsController:\n    connection: Annotated[str,Inject('CONNECTION')]\n    cat_service: Annotated[CatsService, Inject()]\n</code></pre> <p>Exporting non-class based provider works perfectly.</p>"},{"location":"fundamental/dynamic-module/","title":"Dynamic modules","text":"<p>Let's start directly with and example. We are going to create <code>ConfigModule</code> like <code>ConfigModule</code> from NestJs.</p> Python<pre><code>from dataclasses import dataclass\nfrom os import path, getcwd\nfrom typing import Union, Annotated\n\nfrom dotenv import dotenv_values\nfrom nestipy.common import Module, Injectable\nfrom nestipy.dynamic_module import ConfigurableModuleBuilder\nfrom nestipy.ioc import Inject\n\n\n@dataclass\nclass ConfigOption:\n    dir: str = getcwd()\n\n\nConfigurableModuleClass, MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[ConfigOption]().build()\n\n\n@Injectable()\nclass ConfigService:\n    _config: Annotated[ConfigOption, Inject(MODULE_OPTION_TOKEN)]\n    _envs: dict = {}\n\n    def __init__(self):\n        file = path.join(self._config.dir, '.env')\n        _envs: dict = dotenv_values(file)\n\n    def get(self, key: str) -&gt; Union[str, None]:\n        if key in self._envs.keys():\n            return self._envs.get(key)\n        return None\n\n\n@Module(\n    providers=[ConfigService],\n    exports=[ConfigService]\n)\nclass ConfigModule(ConfigurableModuleClass):\n    pass\n</code></pre> <p>So, let's view how to use it.</p> Python<pre><code>from nestipy.common import Module\n\n\n@Module(\n    imports=[\n        ConfigModule.register()  # we can define ConfigOption in register\n        # ConfigModule.register(options=ConfigOption(dir=getcwd()))\n    ],\n    ...\n)\nclass AppModule:\n    pass\n</code></pre> <p>Now, we can use <code>ConfigModule</code> in controller or a service provider by injecting it.</p> Python<pre><code>from nestipy.ioc import Inject\nfrom typing import Annotated\nfrom nestipy.common import Controller\n\n\n@Controller('cats')\nclass CatsController:\n    config_service: Annotated[ConfigService, Inject()]\n</code></pre> <p>Inside service,</p> Python<pre><code>from typing import Annotated\nfrom nestipy.common import Injectable\nfrom nestipy.ioc import Inject\n\n\n@Injectable()\nclass CatsService:\n    config_service: Annotated[ConfigService, Inject()]\n</code></pre> <p>Using it inside async factory.</p> Python<pre><code>from dataclasses import dataclass\nfrom typing import Annotated\n\nfrom nestipy.dynamic_module import ConfigurableModuleBuilder, NestipyModule\nfrom nestipy.ioc import Inject\n\nfrom nestipy.common import ConfigModule, ConfigService\nfrom nestipy.common import Module\n\n\n@dataclass\nclass DatabaseConfigOption:\n    host: str\n    password: str\n    user: str\n    port: int = 3306\n\n\nConfigurableModuleClass, MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[DatabaseConfigOption]().set_method(\n    'for_root').build()\n\n\n@Module()\nclass DatabaseModule(ConfigurableModuleClass, NestipyModule):\n    option: Annotated[DatabaseConfigOption, Inject(MODULE_OPTION_TOKEN)]\n\n    def on_startup(self):\n        # start connection to database by using option\n        pass\n\n    def on_shutdown(self):\n        # stop connection to database\n        pass\n\n\nasync def database_config_factory(config: ConfigService) -&gt; DatabaseConfigOption:\n    return DatabaseConfigOption(\n        host=config.get('DB_HOST'),\n        port=int(config.get('DB_PORT')),\n        password=config.get('DB_PASSWORD'),\n        user=config.get('DB_USER')\n    )\n\n\n@Module(\n    imports=[\n        ConfigModule.register(),\n        DatabaseModule.for_root_async(\n            factory=database_config_factory,\n            inject=[ConfigService]\n        )\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> <p>Note: We can inject service directly inside <code>Module</code> if we want to use <code>DatabaseService</code> with lifecycle hook inside `DatabaseModule</p> <p>Take a look here for an  example.</p>"},{"location":"fundamental/testing/","title":"Testing","text":"<p>Coming soon</p>"},{"location":"graphql/quick-start/","title":"Quick start","text":"<p>Currently, Nestipy uses Strawberry as its GraphQL ASGI. It's compatible with Guards, Interceptor and ExceptionFilter . Nestipy simplifies the syntax to operate more like NestJS does with GraphQL.</p>"},{"location":"graphql/quick-start/#configuration","title":"Configuration","text":"<p>To use GraphQL wit Nestipy, we need to add <code>GraphQlModule</code> in root module <code>AppModule</code>.</p> Python<pre><code>from nestipy.common import Module\nfrom nestipy.graphql import GraphqlModule, GraphqlOption\n\n\n@Module(\n    imports=[\n        ...\n        GraphqlModule.for_root(options=GraphqlOption())\n        ...\n    ],\n    providers=[\n        CatsResolver\n    ]\n\n)\nclass AppModule:\n    pass\n</code></pre> <p>So, <code>CatsResolver</code> will be like.</p> Python<pre><code>import asyncio\nfrom typing import AsyncIterator, Annotated\n\nfrom nestipy.graphql import Resolver, Query, Mutation, Subscription\nfrom nestipy.ioc import Arg\n\n\n@Resolver()\nclass CatsResolver:\n    @Query()\n    @UseGuards(TestGuardMethod)\n    def test_query(self, test: Annotated[str, Arg('test')]) -&gt; str:\n        return \"Query\"\n\n    @Mutation()\n    def test_mutation(self) -&gt; str:\n        return 'Mutation'\n\n    @Subscription()\n    async def test_subscription(self, count: Annotated[int, Arg('count')] = 1000) -&gt; AsyncIterator[int]:\n        for i in range(count):\n            yield i\n            await asyncio.sleep(0.5)\n</code></pre> <p>For scalar, input, etc.. we can reef to Strawberry documentation  and using alias from</p> Python<pre><code>from nestipy.graphql.strawberry import ObjectType, Input, Field, Interface, Scalar, SchemaDirective, etc\n\n...\n\n...\n</code></pre> <p>Or use its from Strawberry's definition.</p> Python<pre><code>from strawberry import type, input, interface, scalar, etc\n\n...\n\n...\n</code></pre> <p>Take a look here for an example.</p>"},{"location":"openapi/start/","title":"Openapi","text":"<p>Nestipy use openapi_docs.v3 cloned from  Blacksheep openapidocs. It's available via <code>from nestipy.openapi.openapi_docs.v3 import Parameter</code>.</p> <p>Let's view how it works.</p> Python<pre><code>import dataclasses\nfrom typing import Annotated\n# from nestipy.openapi.openapi_docs.v3 import Parameter\nfrom nestipy.common import Controller, Post, Get, Render\nfrom nestipy.common import HttpException, HttpStatusMessages, HttpStatus\nfrom nestipy.common import Request, Response\nfrom nestipy.ioc import Req, Res, Body\nfrom nestipy.openapi import ApiTags, ApiOkResponse, ApiNotFoundResponse, ApiCreatedResponse, ApiBearerAuth, ApiBody\n\n\n@dataclasses.dataclass\nclass TestBody:\n    test: str\n\n\n@Controller()\n@ApiTags('App')\n@ApiOkResponse()\n@ApiNotFoundResponse()\nclass AppController:\n\n    @Render('index.html')\n    @Get()\n    async def test(self, req: Annotated[Request, Req()], res: Annotated[Response, Res()]):\n        return {'title': 'Hello'}\n        # return await res.render('index.html', {'title': 'Hello'})\n\n    @Post()\n    @ApiBody(TestBody)\n    # @ApiBody(TestBody, 'application/json')\n    @ApiBearerAuth()  # Enable security bearer\n    @ApiCreatedResponse()\n    async def post(self, res: Annotated[Response, Res()], body: Annotated[TestBody, Body()]):\n        raise HttpException(HttpStatus.UNAUTHORIZED, HttpStatusMessages.UNAUTHORIZED)\n</code></pre>"},{"location":"openapi/start/#swagger","title":"Swagger","text":"<p>This is how config swagger with Nestipy.</p> Python<pre><code>from nestipy.core.nestipy_factory import NestipyFactory\nfrom nestipy.core.platform import NestipyFastApiApplication\nfrom nestipy.openapi import DocumentBuilder, SwaggerModule\n\napp = NestipyFactory[NestipyFastApiApplication].create(AppModule)\n\n# setup swagger\ndocument = DocumentBuilder().set_title('Example API').set_description('The API description').set_version(\n    '1.0').add_bearer_auth().add_basic_auth().build()\nSwaggerModule.setup('api', app, document)\n</code></pre> <p>Now, we can access localhost:8000/api to show swagger documentation.</p>"},{"location":"overview/controller/","title":"Controllers","text":"<p>Controller in Nestipy look like</p> Python<pre><code>from nestipy.common import Controller, Get\n\n\n@Controller('cats')\nclass CatsController:\n    @Get()\n    async def find_all(self) -&gt; str:\n        return 'This action returns all cats'\n</code></pre>"},{"location":"overview/controller/#request-and-response-object","title":"Request and Response object","text":"<p>We can access Request and Response object from handler bu using annotation type Req and Res respectively.</p> Python<pre><code>from typing import Annotated\nfrom nestipy.ioc import Req, Res\n\nfrom nestipy.common import Controller, Get, Response, Request\n\n\n@Controller('cats')\nclass CatsController:\n    @Get()\n    async def find_all(self, req: Annotated[Request, Req()], res: Annotated[Response, Res()]) -&gt; Response:\n        return await res.send('This action returns all cats')\n</code></pre>"},{"location":"overview/controller/#full-resource-sample","title":"Full resource sample","text":"<p>Below is a sample illustrating how different decorators are employed to create a basic controller. This controller furnishes methods for accessing and modifying internal data.</p> Python<pre><code>from dataclasses import dataclass\nfrom typing import Annotated\n\nfrom nestipy.common import Controller, Get, Put, Post, Delete\nfrom nestipy.ioc import Body, Query, Params, Session, Header\n\n\n@dataclass\nclass CreateCat:\n    name: str\n\n\n@Controller('cats')\nclass CatsController:\n\n    @Post()\n    async def create(self, data: Annotated[CreateCat, Body()]) -&gt; str:\n        return 'This action adds a new cat'\n\n    @Get()\n    async def find_all(self, limit: Annotated[int, Query('limit')], headers: Annotated[dict, Header()]) -&gt; str:\n        return f\"This action returns all cats (limit: {limit} items\"\n\n    @Get('/{cat_id}')\n    async def find_one(self, cat_id: Annotated[str, Params('cat_id')]):\n        return f\"This action returns a #{cat_id} cat\"\n\n    @Put('/{cat_id}')\n    async def update(self, cat_id: Annotated[str, Params('cat_id')], data: Annotated[CreateCat, Body()]):\n        return f\"This action updates a #{cat_id} cat\"\n\n    @Delete('/{cat_id}')\n    async def remove(self, cat_id: Annotated[str, Params('cat_id')], user_id: Session[int, None]):\n        return f\"This action removes a #{cat_id} cat\"\n</code></pre>"},{"location":"overview/controller/#getting-up-and-running","title":"Getting up and running","text":"<p>Similar to NestJs, registering controllers within modules is required.</p> <p>Python<pre><code>from nestipy.common import Module\nfrom .cats_controller import CatsController\n\n\n@Module(\n    controllers=[\n        CatsController\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> Take a look here for an  example. </p>"},{"location":"overview/exception-filter/","title":"Exceptions filters","text":"<p>This is a example of using exception filter with Nestipy.</p> Python<pre><code>from typing import Any\n\nfrom nestipy.common import ExceptionFilter, Catch, HttpException\nfrom nestipy.core import ArgumentHost\n\n\n@Catch()\nclass HttpExceptionFilter(ExceptionFilter):\n    async def catch(self, exception: HttpException, host: ArgumentHost) -&gt; Any:\n        print('Catcher')\n</code></pre> <p>To catch specific exception we need to create class that extends <code>HttpException</code>.</p> Python<pre><code>import datetime\nfrom typing import Any\n\nfrom nestipy.common import ExceptionFilter, Catch, HttpStatus, HttpStatusMessages, HttpException,\nfrom nestipy.core import ArgumentHost\n\n\nclass BadRequestException(HttpException):\n    def __init__(self):\n        super(self, ).__init__(HttpStatus.BAD_REQUEST, HttpStatusMessages.BAD_REQUEST)\n\n\n@Catch(BadRequestException)\nclass BadRequestExceptionFilter(ExceptionFilter):\n    async def catch(self, exception: HttpException, host: ArgumentHost) -&gt; Any:\n        response = host.get_response()\n        request = host.get_request()\n        status = exception.status_code\n        print('Catcher')\n        return await response.json({\n            'statusCode': status,\n            'timestamp': datetime.datetime.now().strftime(\"%d/%m/%Y, %H:%M:%S\"),\n            'path': request.path,\n        })\n</code></pre>"},{"location":"overview/exception-filter/#binding-filters","title":"Binding filters","text":"<p>Let's tie our new BadRequestExceptionFilter to the CatsController's create() method.</p> Python<pre><code>from nestipy.common import Controller, Post\nfrom nestipy.common import UseFilters\n\n\n@Controller('cats')\nclass CatsController:\n\n    @UseFilters(BadRequestExceptionFilter)\n    @Post()\n    async def create(self):\n        raise BadRequestException()\n</code></pre> <p>Apply on controller.</p> Python<pre><code>from nestipy.common import Controller, Post\nfrom nestipy.common import UseFilters\n\n\n@UseFilters(BadRequestExceptionFilter)\n@Controller('cats')\nclass CatsController:\n\n    @Post()\n    async def create(self):\n        raise BadRequestException()\n</code></pre> <p>To create a global-scoped filter, you would do the following:</p> Python<pre><code>from nestipy.core.nestipy_factory import NestipyFactory\n\napp = NestipyFactory.create(AppModule)\n\napp.use_global_filters(BadRequestExceptionFilter)\n</code></pre> <p>Using it from provider.</p> <p>Python<pre><code>from nestipy.common import Module, ModuleProviderDict\nfrom nestipy.core.constant import AppKey\n\n\n@Module(\n    providers=[\n        ModuleProviderDict(token=AppKey.APP_FILTER, use_class=BadRequestExceptionFilter)\n    ]\n)\nclass AppModule:\n</code></pre> Take a look here for an  example.</p>"},{"location":"overview/first-step/","title":"First steps","text":"<p>These articles will teach you the basic principles of Nestipy. You'll get to know its key components by building a simple CRUD application, which will introduce you to various beginner-level features.</p>"},{"location":"overview/first-step/#prerequisites","title":"Prerequisites","text":"<p>Please make sure that Python (version &gt;= 3.9) is installed on your operating system.</p>"},{"location":"overview/first-step/#setup","title":"Setup","text":"<p>Starting a fresh project using the Nestipy CLI is simple. Just configure Python's environment and run these commands in your OS terminal to create a new Nestipy project. Bash<pre><code>pip install nestipy-cli\nnestipy new project-name\n</code></pre> Upon execution, a directory named <code>project-name</code> will be generated, containing a src/ directory filled with essential core files.</p> Text Only<pre><code>\u251c\u2500\u2500 app_module.py\n\u251c\u2500\u2500 app_controller.py\n\u251c\u2500\u2500 app_service.py\n\u251c\u2500\u2500 main.py\n|\u2500\u2500 requirements.txt\n|\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n</code></pre> <p>The main.py file contains an instance of application and bootstrapping it with uvicorn.</p> Python<pre><code>import uvicorn\nfrom nestipy.core import NestipyFactory\n\nfrom app_module import AppModule\n\napp = NestipyFactory.create(AppModule)\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', reload=True)\n</code></pre>"},{"location":"overview/first-step/#platform","title":"Platform","text":"<p>In essence, Nestipy can function with any ASGI framework once an adapter is developed. It inherently supports two ASGI platforms: FastAPI and BlackSheep. You have the freedom to select the one that aligns most closely with your requirements. By default, Nestipy use FastAPI adapter.  We can specify platform from NestipyFactory. Python<pre><code>from nestipy.core import NestipyFastApiApplication\n\napp = NestipyFactory[NestipyFastApiApplication].create(AppModule)\n</code></pre> Or with blacksheep</p> Python<pre><code>from nestipy.core import NestipyBlackSheepApplication\n\napp = NestipyFactory[NestipyBlackSheepApplication].create(AppModule)\n</code></pre>"},{"location":"overview/first-step/#running-the-application","title":"Running the application","text":"<p>After installation, simply run this command in your OS terminal to start the application and listen for incoming HTTP requests:</p> <p>Bash<pre><code>python main.py\n</code></pre> Take a look here for an  example.</p> <p></p>"},{"location":"overview/guard/","title":"Guards","text":"<p>A guard is a class annotated with the <code>@Injectable()</code> decorator, which implements the <code>CanActivate</code> interface.</p>"},{"location":"overview/guard/#authorization-guard","title":"Authorization guard","text":"Python<pre><code>from typing import Awaitable, Union\n\nfrom nestipy.common import CanActivate\nfrom nestipy.common import Injectable\nfrom nestipy.core import ExecutionContext\n\n\n@Injectable()\nclass AuthGuard(CanActivate):\n    def can_activate(self, context: ExecutionContext) -&gt; Union[Awaitable[bool], bool]:\n        req = context.switch_to_http().get_request()\n        return req.headers.get('Authorization') is not None\n</code></pre>"},{"location":"overview/guard/#binding-guards","title":"Binding guards","text":"<p>Guard can bing like with four ways, in controller, method, global and in provider.</p> Python<pre><code>from nestipy.common import Controller, Post, UseGuards\n\n\n@UseGuards(AuthGuard)\n@Controller('cats')\nclass CatsController:\n\n    @UseGuards(AuthGuard)\n    @Post()\n    async def create(self):\n        pass\n</code></pre> <p>Use guard globally by provider</p> Python<pre><code>from nestipy.common import Module, ModuleProviderDict\nfrom nestipy.core import AppKey\n\n\n@Module(\n    providers=[\n        ModuleProviderDict(\n            AppKey.APP_GUARD,\n            use_class=AuthGuard\n        )\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> <p>Or use guard globally in <code>main.py</code></p> Python<pre><code>from nestipy.core import NestipyFactory\n\napp = NestipyFactory.create(AppModule)\napp.use_global_guards(AuthGuard)\n</code></pre>"},{"location":"overview/guard/#full-example-for-roles-guard","title":"Full example for roles guard","text":"Python<pre><code>import typing\nfrom typing import Union, Awaitable\n\nfrom nestipy.metadata import SetMetadata, Reflect\n\nfrom nestipy.common import CanActivate, UseGuards\nfrom nestipy.common import Controller, Post, Injectable\nfrom nestipy.core import ExecutionContext\n\nROLES = 'ROLES'\n\n\ndef Roles(roles: list[str]):\n    return SetMetadata(ROLES, roles, as_list=True)\n\n\n@Injectable()\nclass RolesGuard(CanActivate):\n    async def can_activate(self, context: ExecutionContext) -&gt; Union[Awaitable[bool], bool]:\n        handler = context.get_handler()\n        class_handler = context.get_class()\n        req = context.switch_to_http().get_request()\n        roles = list(set(Reflect.get_metadata(class_handler, ROLES, []) + Reflect.get_metadata(handler, ROLES, [])))\n        user_roles = req.user.roles if req.user is not None else []\n        return len(set(typing.cast(list[str], user_roles)) &amp; set(roles)) &gt; 0\n\n\n@UseGuards(RolesGuard)\n@Controller('cats')\nclass CatsController:\n    @Post()\n    @Roles(['admin'])\n    async def create(self):\n        pass\n</code></pre> <p>Take a look here for an  example.</p>"},{"location":"overview/interceptor/","title":"Interceptors","text":"<p>In simpler terms, Nestipy offers Interceptor functionality, which functions similarly to how Interceptors work in NestJs, allowing you to intercept requests. Nestipy Interceptor must be a class that extends <code>NestipyInterceptor</code>.</p> Python<pre><code>from nestipy.common import Injectable\nfrom nestipy.common import NestipyInterceptor\nfrom nestipy.core import ExecutionContext\nfrom nestipy.types_ import NextFn\n\n\n@Injectable()\nclass TestInterceptor(NestipyInterceptor):\n    async def intercept(self, context: ExecutionContext, next_fn: NextFn):\n        print('Intercepted...')\n        return await next_fn()\n</code></pre>"},{"location":"overview/interceptor/#apply-interceptors","title":"Apply interceptors","text":"<p>Interceptors can be applied to controllers, specific controller methods, within modules via providers, or even globally across the application.</p> Python<pre><code>from nestipy.common import Controller, Post, UseInterceptors, Module, ModuleProviderDict\nfrom nestipy.core import AppKey\n\n\n@UseInterceptors(TestInterceptor)\n@Controller('cats')\nclass CatsController:\n\n    @UseInterceptors(TestInterceptor)\n    @Post()\n    async def create(self):\n        pass\n\n\n@Module(\n    controllers=[\n        CatsController\n    ],\n    providers=[\n        ModuleProviderDict(token=AppKey.APP_INTERCEPTOR, use_class=TestInterceptor)\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> <p>Globally , it works like.</p> <p>Python<pre><code>from nestipy.core import NestipyFactory\n\napp = NestipyFactory.create(AppModule)\napp.use_global_interceptors(TestInterceptor)\n</code></pre> Take a look here for an  example.</p>"},{"location":"overview/middleware/","title":"Middlewares","text":"<p>Nestipy define middleware like NestJs do.</p> Python<pre><code>from nestipy.common import Injectable\n\nfrom nestipy.common import Request, Response\nfrom nestipy.common import NestipyMiddleware\nfrom nestipy.types_ import NextFn\n\n\n@Injectable()\nclass LoggerMiddleware(NestipyMiddleware):\n    async def use(self, req: Request, res: Response, next_fn: NextFn):\n        print('Requesting ....')\n        await next_fn()\n</code></pre>"},{"location":"overview/middleware/#dependency-injection","title":"Dependency injection","text":"<p>Nestipy middleware support dependency injection</p>"},{"location":"overview/middleware/#applying-middleware","title":"Applying middleware","text":"<p>Nestipy apply middleware like the way Nestjs use. Modules that include middleware have to implement the NestipyModule.</p> app_module.py<pre><code>from nestipy.dynamic_module import NestipyModule\n\nfrom nestipy.common import Module\nfrom nestipy.core import MiddlewareConsumer\n\n\n@Module()\nclass AppModule(NestipyModule):\n    def configure(self, consumer: MiddlewareConsumer):\n        consumer.apply(LoggerMiddleware).for_route('cats')\n</code></pre>"},{"location":"overview/middleware/#apply-middleware-for-controller","title":"Apply middleware for controller","text":"<p>We can apply middleware for controller and excludes some routes.</p> app_module.py<pre><code>from nestipy.dynamic_module import NestipyModule\n\nfrom nestipy.common import Module\nfrom nestipy.core import MiddlewareConsumer\n\n\n@Module()\nclass AppModule(NestipyModule):\n    def configure(self, consumer: MiddlewareConsumer):\n        consumer.apply(LoggerMiddleware).for_route(CatsController).excludes([])\n</code></pre>"},{"location":"overview/middleware/#functional-middleware","title":"Functional middleware","text":"Python<pre><code>from nestipy.common import Request, Response\nfrom nestipy.types_ import NextFn\n\n\nasync def logger(req: Request, res: Response, next_fn: NextFn):\n    print('Requesting ....')\n    await next_fn()\n</code></pre> <p>And use it within the AppModule:</p> Python<pre><code>consumer.apply(logger).for_route(CatsController).excludes([])\n</code></pre>"},{"location":"overview/middleware/#global-middleware","title":"Global middleware","text":"Python<pre><code>from nestipy.core import NestipyFactory\n\napp = NestipyFactory.create(AppModule)\napp.use(logger)\n</code></pre> <p>Take a look here for an  example.</p>"},{"location":"overview/module/","title":"Modules","text":"<p>For Nestipy, module works like NestJs module . It support re-exporting as same as NestJs.</p>"},{"location":"overview/module/#dynamic-modules","title":"Dynamic modules","text":"<p>Following is an example of a dynamic module definition for a <code>DatabaseModule</code>:</p> Python<pre><code>from nestipy.common import Module\nfrom nestipy.dynamic_module import DynamicModule\n\n\n@Module()\nclass DatabaseModule:\n    @classmethod\n    def register(cls) -&gt; DynamicModule:\n        return DynamicModule(\n            module=cls,\n            providers=[],\n            controllers=[],\n            imports=[],\n            exports=[]\n        )\n</code></pre> <p>If we want to use params from <code>@Module()</code> decorator in dynamic module, we must do like the following example.</p> Python<pre><code>from dataclasses import dataclass\n\nfrom nestipy.dynamic_module import DynamicModule\nfrom nestipy.ioc import Inject\nfrom nestipy.metadata import Reflect, ModuleMetadata\n\nfrom nestipy.common import Module, ModuleProviderDict, Injectable\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nDATABASE_OPTION = 'DATABASE_OPTION'\n\n\n@Injectable()\nclass DatabaseService:\n    option: Inject[DATABASE_OPTION]\n\n\n@Module(\n    is_global=True,\n    providers=[DatabaseService]\n)\nclass DatabaseModule:\n    # this will be an instance of DatabaseOption \n\n    @classmethod\n    def register(cls, option: DatabaseOption) -&gt; DynamicModule:\n        return DynamicModule(\n            module=cls,\n            providers=[ModuleProviderDict(token=DATABASE_OPTION, value=option)] + Reflect.get_metadata(\n                cls,\n                ModuleMetadata.Providers,\n                []\n            ),\n            controllers=[] + Reflect.get_metadata(cls, ModuleMetadata.Controllers, []),\n            imports=[] + Reflect.get_metadata(cls, ModuleMetadata.Imports, []),\n            exports=[] + Reflect.get_metadata(cls, ModuleMetadata.Exports, []),\n            is_global=Reflect.get_metadata(cls, ModuleMetadata.Global, False)\n        )\n</code></pre> <p>To facilitate creating of Dynamic module, Nestipy provide <code>ConfigurableModuleBuilder</code> class rom <code>nestipy.dynamic_module</code>.</p> <p>This is an example.</p> Python<pre><code>from dataclasses import dataclass\nfrom typing import Annotated\nfrom nestipy.dynamic_module import ConfigurableModuleBuilder\nfrom nestipy.ioc import Inject\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nConfigurableModuleClass, DATABASE_MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[DatabaseOption]().set_method(\n    'for_root').build()\n\n\nclass DatabaseModule(ConfigurableModuleClass):\n    option: Inject[DATABASE_MODULE_OPTION_TOKEN]\n</code></pre> <p>For this, we will call <code>DatabaseModule.for_root(option)</code> or <code>DatabaseModule.for_root_async(option_async)</code> to register Module. The default method to call is <code>register</code> and <code>register_async</code> if it's not defined.</p> <p>For a lifecycle hooks, we need to extends <code>NestipyModule</code>.</p> Python<pre><code>from dataclasses import dataclass\nfrom typing import Annotated\nfrom nestipy.dynamic_module import ConfigurableModuleBuilder\nfrom nestipy.dynamic_module import NestipyModule\nfrom nestipy.ioc import Inject\n\n\n@dataclass\nclass DatabaseOption:\n    option: str = ''\n\n\nConfigurableModuleClass, DATABASE_MODULE_OPTION_TOKEN = ConfigurableModuleBuilder[DatabaseOption]().set_method(\n    'for_root').build()\n\n\nclass DatabaseModule(ConfigurableModuleClass, NestipyModule):\n    option: Annotated[DatabaseOption, Inject(DATABASE_MODULE_OPTION_TOKEN)]\n\n    async def on_startup(self):\n        pass\n\n    async def on_shutdown(self):\n        pass\n</code></pre> <p> </p>"},{"location":"overview/provider/","title":"Providers","text":"<p>Provider is the same for NestJs providers.</p>"},{"location":"overview/provider/#services","title":"Services","text":"<p>Let's create a example of service.</p> Python<pre><code>from typing import Any\n\nfrom nestipy.common import Injectable\n\n\n@Injectable()\nclass CatsService:\n    _cats: list[Any] = []\n\n    def create(self, cat: Any):\n        self._cats.append(cat)\n\n    def find_all(self):\n        return self._cats\n</code></pre> <p>This is how we use it inside controller.</p> Python<pre><code>from dataclasses import dataclass\nfrom typing import Annotated\nfrom nestipy.ioc import Inject, Body\n\nfrom nestipy.common import Controller, Post, Get\nfrom .cats_service import CatsService\n\n\n@dataclass\nclass CreateCat:\n    name: str\n\n\n@Controller('cats')\nclass CatsController:\n    _service: Annotated[CatsService, Inject()]\n\n    @Post()\n    async def create(self, data: Body[CreateCat]):\n        self._service.create(data)\n\n    @Get()\n    async def find_all(self):\n        return self._service.find_all()\n</code></pre> <p>Register provider in module.</p> Python<pre><code>from nestipy.common import Module\n\n\n@Module(\n    providers=[\n        CatsService\n    ],\n    controllers=[\n        CatsController\n    ]\n)\nclass CatsModule:\n    pass\n</code></pre> <p>Provider can be exported to use by other module.</p> Python<pre><code>from nestipy.common import Module\n\n\n@Module(\n    providers=[\n        CatsService\n    ],\n    controllers=[\n        CatsController\n    ],\n    exports=[\n        CatsService\n    ]\n)\nclass CatsModule:\n    pass\n</code></pre>"},{"location":"overview/provider/#dependency-injection","title":"Dependency injection","text":"<p>With Nestipy, dependency work in 2 ways: </p>"},{"location":"overview/provider/#inject-dependency-via-property-for-class","title":"Inject dependency via property( for class).","text":"Python<pre><code>@Controller('cats')\nclass CatsController:\n    _service: Annotated[CatsService, Inject()]\n</code></pre>"},{"location":"overview/provider/#inject-dependency-via-class-method","title":"Inject dependency via class method.","text":"<p>It work like other dependency method.</p> <p>Take a look here for an  example.</p>"},{"location":"websocket/adapter/","title":"Adapters","text":"<p>Coming soon</p>"},{"location":"websocket/gateway/","title":"Gateways","text":"<p>By default, Nestipy use socketio as a Gateway. However, we can create our own adapter.</p> <p>Firstly, we need to create a gateway class</p> Python<pre><code>from typing import Annotated\nfrom nestipy.ioc import SocketServer, SocketClient, SocketData\n\nfrom nestipy.websocket import IoAdapter, Gateway, SubscribeMessage\n\n\n@Gateway()\nclass AppGateway:\n    server: Annotated[IoAdapter, SocketServer()]\n\n    @SubscribeMessage('user')\n    async def on_user(self, sid: Annotated[str, SocketClient()], data: Annotated[str, SocketData()]):\n        print(sid, data)\n        await self.server.emit('user', data, sid)\n</code></pre> <p>Now, use gateway as module provider.</p> Python<pre><code>from nestipy.common.decorator import Module\n\n\n@Module(\n    providers=[\n        AppGateway\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> <p>After all, we need to tell Nestipy to use socketio as io adapater.</p> Python<pre><code>import socketio\n\nfrom nestipy.core.nestipy_factory import NestipyFactory\nfrom nestipy.websocket import SocketIoAdapter\n\napp = NestipyFactory.create(AppModule)\nsio = socketio.AsyncServer(async_mode='asgi')\napp.use_io_adapter(SocketIoAdapter(sio))\n</code></pre> <p>Gateway is marked as Injectable, it means you can inject it into controllers or other services within the same module. You can also inject it everywhere if it's defined as a provider in the root module.</p> <p>A working example can be found here.</p>"}]}